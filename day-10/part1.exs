defmodule AoC.Day10.Part1 do
  @moduledoc """
  --- Day 10: The Stars Align ---
  It's no use; your navigation system simply isn't capable of providing walking
  directions in the arctic circle, and certainly not in 1018.

  The Elves suggest an alternative. In times like these, North Pole rescue
  operations will arrange points of light in the sky to guide missing Elves
  back to base. Unfortunately, the message is easy to miss: the points move
  slowly enough that it takes hours to align them, but have so much momentum
  that they only stay aligned for a second. If you blink at the wrong time, it
  might be hours before another message appears.

  You can see these points of light floating in the distance, and record their
  position in the sky and their velocity, the relative change in position per
  second (your puzzle input). The coordinates are all given from your
  perspective; given enough time, those positions and velocities will move the
  points into a cohesive message!

  Rather than wait, you decide to fast-forward the process and calculate what
  the points will eventually spell.

  For example, suppose you note the following points:

  position=< 9,  1> velocity=< 0,  2>
  position=< 7,  0> velocity=<-1,  0>
  position=< 3, -2> velocity=<-1,  1>
  position=< 6, 10> velocity=<-2, -1>
  position=< 2, -4> velocity=< 2,  2>
  position=<-6, 10> velocity=< 2, -2>
  position=< 1,  8> velocity=< 1, -1>
  position=< 1,  7> velocity=< 1,  0>
  position=<-3, 11> velocity=< 1, -2>
  position=< 7,  6> velocity=<-1, -1>
  position=<-2,  3> velocity=< 1,  0>
  position=<-4,  3> velocity=< 2,  0>
  position=<10, -3> velocity=<-1,  1>
  position=< 5, 11> velocity=< 1, -2>
  position=< 4,  7> velocity=< 0, -1>
  position=< 8, -2> velocity=< 0,  1>
  position=<15,  0> velocity=<-2,  0>
  position=< 1,  6> velocity=< 1,  0>
  position=< 8,  9> velocity=< 0, -1>
  position=< 3,  3> velocity=<-1,  1>
  position=< 0,  5> velocity=< 0, -1>
  position=<-2,  2> velocity=< 2,  0>
  position=< 5, -2> velocity=< 1,  2>
  position=< 1,  4> velocity=< 2,  1>
  position=<-2,  7> velocity=< 2, -2>
  position=< 3,  6> velocity=<-1, -1>
  position=< 5,  0> velocity=< 1,  0>
  position=<-6,  0> velocity=< 2,  0>
  position=< 5,  9> velocity=< 1, -2>
  position=<14,  7> velocity=<-2,  0>
  position=<-3,  6> velocity=< 2, -1>

  Each line represents one point. Positions are given as <X, Y> pairs: X
  represents how far left (negative) or right (positive) the point appears,
  while Y represents how far up (negative) or down (positive) the point
  appears.

  At 0 seconds, each point has the position given. Each second, each point's
  velocity is added to its position. So, a point with velocity <1, -2> is
  moving to the right, but is moving upward twice as quickly. If this point's
  initial position were <3, 9>, after 3 seconds, its position would become <6,
  3>.

  Over time, the points listed above would move like this:

  Initially:
  ........#.............
  ................#.....
  .........#.#..#.......
  ......................
  #..........#.#.......#
  ...............#......
  ....#.................
  ..#.#....#............
  .......#..............
  ......#...............
  ...#...#.#...#........
  ....#..#..#.........#.
  .......#..............
  ...........#..#.......
  #...........#.........
  ...#.......#..........

  After 1 second:
  ......................
  ......................
  ..........#....#......
  ........#.....#.......
  ..#.........#......#..
  ......................
  ......#...............
  ....##.........#......
  ......#.#.............
  .....##.##..#.........
  ........#.#...........
  ........#...#.....#...
  ..#...........#.......
  ....#.....#.#.........
  ......................
  ......................

  After 2 seconds:
  ......................
  ......................
  ......................
  ..............#.......
  ....#..#...####..#....
  ......................
  ........#....#........
  ......#.#.............
  .......#...#..........
  .......#..#..#.#......
  ....#....#.#..........
  .....#...#...##.#.....
  ........#.............
  ......................
  ......................
  ......................

  After 3 seconds:
  ......................
  ......................
  ......................
  ......................
  ......#...#..###......
  ......#...#...#.......
  ......#...#...#.......
  ......#####...#.......
  ......#...#...#.......
  ......#...#...#.......
  ......#...#...#.......
  ......#...#..###......
  ......................
  ......................
  ......................
  ......................

  After 4 seconds:
  ......................
  ......................
  ......................
  ............#.........
  ........##...#.#......
  ......#.....#..#......
  .....#..##.##.#.......
  .......##.#....#......
  ...........#....#.....
  ..............#.......
  ....#......#...#......
  .....#.....##.........
  ...............#......
  ...............#......
  ......................
  ......................

  After 3 seconds, the message appeared briefly: HI. Of course, your message
  will be much longer and will take many more seconds to appear.

  What message will eventually appear in the sky?
  """

  @input_regex ~r/position=<\s*(?<x>-?\d+), \s*(?<y>-?\d+)> velocity=<\s*(?<velx>-?\d+), \s*(?<vely>-?\d+)>/

  def run(filename) do
    File.stream!(filename, [encoding: :latin1])
    |> Stream.map(&Regex.named_captures(@input_regex, &1))
    |> Enum.map(fn map -> {
      String.to_integer(map["x"]),
      String.to_integer(map["y"]),
      String.to_integer(map["velx"]),
      String.to_integer(map["vely"])
    } end)
    |> find_sec_with_minimum_bounding_box
    |> build_output
  end

  defp find_sec_with_minimum_bounding_box(lights) do
    # My intuition here is that each step should bring the lights closer
    # together. Therefore, if next_lights is "bigger" than lights, then lights
    # probably has our message. In other words, if the width and/or height of
    # next_lights is greater than the width/height of lights, we've probably
    # overshot the message and the lights are starting to move apart.
    Stream.iterate(0, &(&1 + 1))
    |> Enum.reduce_while(nil, fn sec, acc ->
      case acc do
        nil -> {:cont, get_dimensions(lights, sec)}
        {prev_width, prev_height} ->
          {width, height} = get_dimensions(lights, sec)
          if width > prev_width or height > prev_height do
            {:halt, {lights, sec - 1}}
          else
            {:cont, {width, height}}
          end
      end
    end)
  end

  defp lights_at_time_t(lights, t) do
    Stream.map(lights, fn {x, y, vx, vy} -> {x + vx * t, y + vy * t} end)
  end

  defp get_dimensions(lights, sec) do
    lights_at_time_t(lights, sec)
    |> Enum.reduce(nil, fn {x, y}, acc ->
      case acc do
        nil -> {x, y, x, y}
        {minx, miny, maxx, maxy} ->
          {min(minx, x), min(miny, y), max(maxx, x), max(maxy, y)}
      end
    end)
    |> (fn {minx, miny, maxx, maxy} -> {maxx - minx, maxy - miny} end).()
  end

  defp build_output({lights, sec}) do
    lights = lights_at_time_t(lights, sec) |> Enum.to_list
    minx = (Stream.map(lights, &(elem(&1, 0))) |> Enum.min)
    Enum.group_by(lights, &(elem(&1, 1)), &(elem(&1, 0)))
    |> Enum.sort_by(&(elem(&1, 0)))
    |> Enum.reduce({"Step: #{sec}\n", nil}, fn {y, xs}, {acc, lasty} ->
      acc = append_times(acc, "\n", if(lasty == nil, do: 0, else: y - lasty - 1))
      {
        (
          Enum.sort(xs)
          |> Enum.reduce({acc, minx - 1}, fn x, {acc, lastx} ->
            if x > lastx do
              {append_times(acc, " ", x - lastx - 1) <> "#", x}
            else
              {acc, x}
            end
          end)
          |> elem(0)
        ) <> "\n",
        y
      }
    end)
    |> elem(0)
  end

  defp append_times(str, to_append, times) when times > 0 do
    Stream.repeatedly(fn -> to_append end)
    |> Stream.take(times)
    |> Enum.reduce(str, &(&2 <> &1))
  end

  defp append_times(str, _to_append, _times) do
    str
  end
end

IO.puts AoC.Day10.Part1.run 'input.txt'
